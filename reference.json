{
  "name": "Mdnainventory",
  "description": "",
  "version": null,
  "classes": [
    {
      "name": "",
      "path": "res://addons/mdna_inventory/plugin.gd",
      "extends_class": [
        "EditorPlugin"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class plugin.gd",
      "description": " An inventory system for MDNA games\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [

      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_enter_tree",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _enter_tree()",
          "description": " Add the inventory as a singeleton\n",
          "arguments": [

          ]
        },
        {
          "name": "_exit_tree",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _exit_tree()",
          "description": " Remove the inventory\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "TriggerHotspot",
      "path": "res://addons/mdna_inventory/types/trigger_hotspot.gd",
      "extends_class": [
        "Resource"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class TriggerHotspot",
      "description": " A trigger hotspot definition resource\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "name",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var name: String",
          "description": " The name of the hotspot\n"
        },
        {
          "name": "scene_name",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var scene_name: String",
          "description": " The name of the scene where this hotspot is valid\n"
        },
        {
          "name": "upper_left",
          "data_type": "Vector2",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var upper_left: Vector2",
          "description": " The upper left corner of the hotspot position\n"
        },
        {
          "name": "lower_right",
          "data_type": "Vector2",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var lower_right: Vector2",
          "description": " The lower right corner of the hotspot position\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "is_over",
          "return_type": "bool",
          "rpc_mode": 0,
          "signature": "func is_over(current_scene: String, position: Vector2) -> bool",
          "description": " A helper method to validate if the specified position is inside the hotspot\n\n **Arguments**\n\n - current_scene: The name of the current scene\n - position: The position in question\n",
          "arguments": [
            {
              "name": "current_scene",
              "type": "String"
            },
            {
              "name": "position",
              "type": "Vector2"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "InventoryConfiguration",
      "path": "res://addons/mdna_inventory/types/inventory_configuration.gd",
      "extends_class": [
        "Resource"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class InventoryConfiguration",
      "description": " The configuration resource of the mdna inventory system\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "size",
          "data_type": "int",
          "default_value": 92,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var size: int = 92",
          "description": " The vertical size of the inventory\n"
        },
        {
          "name": "theme",
          "data_type": "Theme",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var theme: Theme",
          "description": " The theme to use for the inventory panel\n"
        },
        {
          "name": "texture_menu",
          "data_type": "Texture",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var texture_menu: Texture",
          "description": " The texture for the menu button (on touch devices)\n"
        },
        {
          "name": "texture_notepad",
          "data_type": "Texture",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var texture_notepad: Texture",
          "description": " The texture for the notepad button\n"
        },
        {
          "name": "texture_activate",
          "data_type": "Texture",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var texture_activate: Texture",
          "description": " The texture for the inventory activate button (on touch devices)\n"
        }
      ],
      "signals": [

      ],
      "methods": [
        {
          "name": "_get_property_list",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _get_property_list()",
          "description": " Build the property list of the resource\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "InventoryItem",
      "path": "res://addons/mdna_inventory/nodes/inventory_item.gd",
      "extends_class": [
        "TextureButton"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class InventoryItem",
      "description": " The inventory item\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "title",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var title: String",
          "description": " The title of the inventory item\n"
        },
        {
          "name": "description",
          "data_type": "String",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var description: String",
          "description": " A description for the inventory item\n"
        },
        {
          "name": "image_normal",
          "data_type": "Texture",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var image_normal: Texture",
          "description": " The image/mouse pointer for the inventory item\n"
        },
        {
          "name": "image_active",
          "data_type": "Texture",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var image_active: Texture",
          "description": " The image/mouse pointer for the inventory item if it's selected\n"
        },
        {
          "name": "trigger_hotspots",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var trigger_hotspots: Array",
          "description": " A list of hotspots this inventory item should react to\n"
        },
        {
          "name": "_is_touch",
          "data_type": "bool",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _is_touch: bool",
          "description": " Wether we're on touch devices\n"
        }
      ],
      "signals": [
        {
          "name": "triggered_hotspot",
          "arguments": [

          ],
          "signature": "signal triggered_hotspot()",
          "description": " Emitted, when a hotspot was triggered\n"
        },
        {
          "name": "triggered_inventory_item",
          "arguments": [

          ],
          "signature": "signal triggered_inventory_item()",
          "description": " Emitted, when another inventory item was triggered\n"
        }
      ],
      "methods": [
        {
          "name": "_input",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _input(event)",
          "description": " Handle touch/press inputs on hotspots\n",
          "arguments": [
            {
              "name": "event",
              "type": "var"
            }
          ]
        },
        {
          "name": "_process",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _process(delta)",
          "description": " Handle mouse cursor changes when the item is over a hotspot\n",
          "arguments": [
            {
              "name": "delta",
              "type": "var"
            }
          ]
        },
        {
          "name": "set_images",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func set_images(p_image_normal: Texture, p_image_active: Texture)",
          "description": " Convenience method to set the images\n\n **Arguments**\n \n - p_image_normal: The texture to use for the image and mousepointer\n - p_image_active: The texture to use for the image and mousepointer when the\n   item was selected\n",
          "arguments": [
            {
              "name": "p_image_normal",
              "type": "Texture"
            },
            {
              "name": "p_image_active",
              "type": "Texture"
            }
          ]
        },
        {
          "name": "add_hotspot",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_hotspot(name: String, scene_name: String, upper_left: Vector2, lower_right: Vector2)",
          "description": "",
          "arguments": [
            {
              "name": "name",
              "type": "String"
            },
            {
              "name": "scene_name",
              "type": "String"
            },
            {
              "name": "upper_left",
              "type": "Vector2"
            },
            {
              "name": "lower_right",
              "type": "Vector2"
            }
          ]
        },
        {
          "name": "_on_InventoryItem_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_InventoryItem_pressed()",
          "description": " Handle clicks on another inventory item\n",
          "arguments": [

          ]
        },
        {
          "name": "_is_over_hotspot",
          "return_type": "TriggerHotspot",
          "rpc_mode": 0,
          "signature": "func _is_over_hotspot(position: Vector2) -> TriggerHotspot",
          "description": " A helper function that looks through the list of hotspots wether the \n hotspot is valid for the current scene and the specified position is\n inside the hotspot\n\n **Arguments**\n\n - position: The position to check against all valid hotspots\n",
          "arguments": [
            {
              "name": "position",
              "type": "Vector2"
            }
          ]
        }
      ],
      "static_functions": [

      ]
    },
    {
      "name": "",
      "path": "res://addons/mdna_inventory/nodes/mdna_inventory.gd",
      "extends_class": [
        "Control"
      ],
      "extends_file": "",
      "icon": "",
      "signature": "class mdna_inventory.gd",
      "description": " The main inventory scene for the MDNA inventory plugin\n",
      "sub_classes": [

      ],
      "constants": [

      ],
      "members": [
        {
          "name": "selected_item",
          "data_type": "InventoryItem",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var selected_item: InventoryItem",
          "description": " The currently selected inventory item or null\n"
        },
        {
          "name": "activated",
          "data_type": "bool",
          "default_value": false,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var activated: bool = false",
          "description": " Wether the inventory is currently activated\n"
        },
        {
          "name": "_inventory_items",
          "data_type": "Array",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _inventory_items: Array",
          "description": " The list of inventory items\n"
        },
        {
          "name": "_configuration",
          "data_type": "InventoryConfiguration",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var _configuration: InventoryConfiguration",
          "description": " The inventory configuration\n"
        },
        {
          "name": "is_touch",
          "data_type": "bool",
          "default_value": null,
          "setter": "",
          "getter": "",
          "export": false,
          "signature": "var is_touch: bool",
          "description": " Helper variable if we're on a touch device\n"
        }
      ],
      "signals": [
        {
          "name": "notepad_pressed",
          "arguments": [

          ],
          "signature": "signal notepad_pressed()",
          "description": " Emitted when the notepad button was pressed\n"
        },
        {
          "name": "menu_pressed",
          "arguments": [

          ],
          "signature": "signal menu_pressed()",
          "description": " Emitted when the menu button was pressed (on touch devices)\n"
        }
      ],
      "methods": [
        {
          "name": "_ready",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _ready()",
          "description": " Hide the activate and menu button on touch devices\n",
          "arguments": [

          ]
        },
        {
          "name": "_input",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _input(event)",
          "description": " Handle inventory drop events and border trigger for mouse\n",
          "arguments": [
            {
              "name": "event",
              "type": "var"
            }
          ]
        },
        {
          "name": "_process",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _process(delta)",
          "description": " Set standard mouse cursor when no selected item is present\n",
          "arguments": [
            {
              "name": "delta",
              "type": "var"
            }
          ]
        },
        {
          "name": "configure",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func configure(configuration: InventoryConfiguration)",
          "description": " Configure the inventory. Should be call by a game core singleton\n",
          "arguments": [
            {
              "name": "configuration",
              "type": "InventoryConfiguration"
            }
          ]
        },
        {
          "name": "disable",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func disable()",
          "description": " Disable the inventory system\n",
          "arguments": [

          ]
        },
        {
          "name": "enable",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func enable()",
          "description": " Enable the inventory system\n",
          "arguments": [

          ]
        },
        {
          "name": "add_item",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func add_item(item: InventoryItem)",
          "description": " Add an item to the inventory\n",
          "arguments": [
            {
              "name": "item",
              "type": "InventoryItem"
            }
          ]
        },
        {
          "name": "_toggle_inventory",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _toggle_inventory()",
          "description": " Show or hide the inventory\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_Activate_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Activate_pressed()",
          "description": " Activate the inventory (on touch devices)\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_Notepad_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Notepad_pressed()",
          "description": " Emit signal, that the notepad was pressed\n",
          "arguments": [

          ]
        },
        {
          "name": "_on_Menu_pressed",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _on_Menu_pressed()",
          "description": " Emit signal, that the menu was pressed\n",
          "arguments": [

          ]
        },
        {
          "name": "_update",
          "return_type": "var",
          "rpc_mode": 0,
          "signature": "func _update()",
          "description": " Update the inventory item view by simply removing all items and re-adding them\n",
          "arguments": [

          ]
        }
      ],
      "static_functions": [

      ]
    }
  ]
}